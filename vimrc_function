" |- FileSize
let g:b = 1.0
let g:kb = g:b * 1024.0
let g:mb = g:kb * 1024.0
let g:gb = g:mb * 1024.0
let g:tb = g:gb * 1024.0
" |- Smooth Scrolling
"func Scroll(up)
"  if a:up == 0 || a:up == 2
"    let l:scrollaction="\<c-y>k"
"  else
"    let l:scrollaction="\<c-e>j"
"  endif
"  let l:lim = 10
"  let l:tim = 10
"  if a:up == 2 || a:up == 3
"    let l:lim = l:lim * 2
"    let l:tim = l:tim / 2
"  endif
"  let l:counter = 0
"  while l:counter < l:lim
"    let l:counter += 1
"    exe "sleep " l:tim . " m"
"    redraw
"    exe "normal " . l:scrollaction
"  endwhile
"endfunc

" |- Compile & Run
func CompileRun(option)
  exe "w"
  if &filetype == 'cpp'
    exe 'make' . a:option
    exe '!time ./%<'
  elseif &filetype == 'tex'
    exe '!xelatex ./%'
  elseif &filetype == 'sh'
    exe '!chmod +x ./%'
    exe '!bash ./%'
  elseif &filetype == 'python'
    exe '!python3 ./%'
  elseif &filetype == 'java'
    exe '!javac %'
    exe '!java %<'
  endif
endfunc

func FileTemp()
  if &filetype == 'cpp'
    exe '0r ~/Template/template.cpp'
    exe 'normal Gddkkkkkkf""%pdF.xj0f""%pdF.x'
  elseif @% == 'check.sh'
    exe '0r ~/Template/template_check.sh'
    exe 'normal Gddgg'
  endif
endfunc

" |- Calculate File Size
func Get_filesize(f)
    let l:size = getfsize(expand(a:f))
    if l:size == 0 || l:size == -1 || l:size == -2
      return ''
    endif
    if l:size < g:kb
      return l:size." B"
    elseif l:size < g:mb
      return printf('%.2f', l:size/g:kb).' K'
    elseif l:size < g:gb
      return printf('%.2f', l:size/g:mb) . ' M'
    elseif l:size < g:tb
      return printf('%.2f', l:size/g:gb) . ' G'
    else
      return printf('%.2f', l:size/g:tb) . ' T'
    endif
endfunc
